{
    "Create data schema": {
        "scope": "typescript",
        "prefix": "schema-data",
        "body": [
            "export const ${1}DataSchema = ss.object({",
            "});",
            "",
            "export type ${1/(.)(.*)/${1:/upcase}$2/g}Data = ss.Infer<typeof ${1}DataSchema>;",
            "",
            "export function is${1/(.)(.*)/${1:/upcase}$2/g}Data(data: unknown): data is ${1/(.)(.*)/${1:/upcase}$2/g}Data {",
            "    return ss.is(data, ${1}DataSchema);",
            "}",
            ""
        ]
    },
    "Create id schema": {
        "scope": "typescript",
        "prefix": "schema-id",
        "body": [
            "export const ${1}IdSchema = defineFlavoredStringSchema('${1/(.)(.*)/${1:/upcase}$2/g}Id');",
            "",
            "export type ${1/(.)(.*)/${1:/upcase}$2/g}Id = ss.Infer<typeof ${1}IdSchema>;",
            ""
        ]
    },
    "Create type schema": {
        "scope": "typescript",
        "prefix": "schema-type",
        "body": [
            "export const ${1}TypeSchema = defineFlavoredStringSchema('${1/(.)(.*)/${1:/upcase}$2/g}Type');",
            "",
            "export type ${1/(.)(.*)/${1:/upcase}$2/g}Type = ss.Infer<typeof ${1}TypeSchema>;",
            "",
            "export const ${1}ConfigSchema = ss.object({",
			"    ${1}Type: ${1}TypeSchema,",
            "});",
            "",
            "export type ${1/(.)(.*)/${1:/upcase}$2/g}Config = ss.Infer<typeof ${1}ConfigSchema>;",
            ""
        ]
    },
    "Create class": {
        "scope": "typescript",
        "prefix": "class-game",
        "body": [
            "type CtorArgs = [${1}Data] | [",
            "];",
            "",
            "function isLoadCtorArgs(args: CtorArgs): args is [${1}Data] {",
            "    return is${1}Data(args[0]);",
            "}",
            "",
            "export class ${1} {",
            "    public constructor(...args: CtorArgs) {",
            "        if (isLoadCtorArgs(args)) {",
            "            const [data] = args;",
            "        } else {",
            "            const [] = args;",
            "        }",
            "    }",
            "}",
			""
        ]
    },
	"Init public field from data": {
        "scope": "typescript",
        "prefix": "this-data-public",
		"body": "this.${1} = data.${1};"
    },
	"Init private field from data": {
        "scope": "typescript",
        "prefix": "this-data-private",
		"body": "this.${1} = data.${1/_$//};"
    },
	"Add element to string enum": {
        "scope": "typescript",
        "prefix": "enum-string",
		"body": "${1} = '${1}',"
	}
}
